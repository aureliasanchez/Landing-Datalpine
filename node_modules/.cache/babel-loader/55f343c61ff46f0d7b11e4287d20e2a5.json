{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp2;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\n\nfunction transitions(_ref) {\n  var duration = _ref.duration;\n  return {\n    \"fade-default\": {\n      transition: 'opacity ' + duration + 'ms ease-in',\n      opacity: 0\n    },\n    \"fade-entering\": {\n      opacity: 0\n    },\n    \"fade-entered\": {\n      opacity: 1\n    },\n    \"fade-exiting\": {\n      opacity: 0\n    },\n    \"fade-exited\": {\n      opacity: 0\n    }\n  };\n}\n\nvar TextRotator = (_temp2 = _class = function (_React$Component) {\n  _inherits(TextRotator, _React$Component);\n\n  function TextRotator() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TextRotator);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      current: null,\n      index: 0,\n      entered: false\n    }, _this.willUnmount = false, _this.trigger = function () {\n      var _this$props = _this.props,\n          content = _this$props.content,\n          startDelay = _this$props.startDelay,\n          time = _this$props.time;\n\n      if (content.length > 0) {\n        _this.timeOut = setTimeout(function () {\n          _this.next();\n\n          _this.interval = setInterval(function () {\n            return _this.next();\n          }, time);\n        }, startDelay);\n      }\n    }, _this.next = function () {\n      if (!_this.willUnmount) {\n        var _this$props2 = _this.props,\n            _content = _this$props2.content,\n            _time = _this$props2.time;\n        var currentStep = _this.state.index;\n        var total = _content.length || 0;\n        var _index = 0;\n\n        if (_this.state.current) {\n          _index = total === currentStep + 1 ? 0 : currentStep + 1;\n        }\n\n        var _current = _content[_index];\n\n        _this.setState({\n          index: _index\n        });\n\n        _this.setCurrent(_current);\n      }\n    }, _this.setCurrent = function (item) {\n      var _this$props3 = _this.props,\n          time = _this$props3.time,\n          transitionTime = _this$props3.transitionTime;\n\n      _this.setState({\n        current: item,\n        entered: true\n      });\n\n      setTimeout(function () {\n        return _this.setState({\n          entered: false\n        });\n      }, time - transitionTime);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  TextRotator.prototype.componentDidMount = function componentDidMount() {\n    this.trigger();\n  };\n\n  TextRotator.prototype.componentWillUnmount = function componentWillUnmount() {\n    clearInterval(this.interval);\n    clearTimeout(this.timeOut);\n    this.willUnmount = true;\n  };\n\n  TextRotator.prototype.render = function render() {\n    var _props = this.props,\n        transitionTime = _props.transitionTime,\n        content = _props.content;\n    var _state = this.state,\n        current = _state.current,\n        index = _state.index,\n        entered = _state.entered;\n\n    var _ref2 = current || content && content[0] || {},\n        className = _ref2.className,\n        _ref2$animation = _ref2.animation,\n        animation = _ref2$animation === undefined ? 'fade' : _ref2$animation,\n        text = _ref2.text;\n\n    var styles = transitions({\n      duration: transitionTime\n    });\n    if (!text) return React.createElement('span', null);\n    return React.createElement(Transition, {\n      'in': entered,\n      timeout: transitionTime\n    }, function (state) {\n      return React.createElement('span', {\n        key: index,\n        className: className,\n        style: _extends({}, styles[animation + '-default'], styles[animation + '-' + state])\n      }, text);\n    });\n  };\n\n  return TextRotator;\n}(React.Component), _class.defaultProps = {\n  time: 2500,\n  startDelay: 250,\n  transitionTime: 500\n}, _temp2);\nexport default TextRotator;","map":null,"metadata":{},"sourceType":"module"}